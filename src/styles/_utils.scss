/* ========== UTILS ========== */
@use '@styles/helpers' as *;

/* Avoid content moving on overflow: hidden */
.disable-scroll {
  position: fixed;
  left: 0;
  top: 0;
  overflow: hidden;
  width: 100%;
  height: 100vh;
}

/* Wrapper to prevent horizontal scroll */
/* if you want use position: sticky; - need to remove // overflow: hidden // !!! */
.wrapper {
  overflow: hidden;
  min-height: 100vh;
  padding-top: var(--header-height);

  &--visible {
    @include respond-above(md) {
      overflow: visible;
    }
  }

  &__blurs {
    position: absolute;
    inset: 0;
    pointer-events: none;

    &::after {
      --size: 35.42vw;

      content: '';
      position: absolute;
      z-index: -1;
      left: 50%;
      top: 0;
      border-radius: var(--size);
      width: var(--size);
      height: var(--size);
      background-color: var(--color-primary);
      opacity: 0.25;
      filter: blur(175px);
      transform: translate(-50%, -40%);
      pointer-events: none;
      transition:
        visibility var(--transition-duration),
        opacity var(--transition-duration);

      @include respond-below(md) {
        --size: 50vw;

        opacity: 0.5;
        transform: translate(-50%, -20%);
      }
    }
  }

  main,
  footer {
    position: relative;
    z-index: 9;
  }

  &:has(.sticky-el) {
    overflow: visible;
  }
}

/* Container */
.container {
  max-width: var(--container);
  margin-inline: auto;
  padding-inline: var(--container-padding);

  &--xs {
    max-width: var(--container-sm);
  }

  &--sm {
    max-width: var(--container-sm);
  }

  &--lg {
    max-width: var(--container-lg);
  }

  &--xl {
    max-width: var(--container-xl);
  }
}

/* Section offset, immit container */
.offset-container {
  padding-left: max(var(--container-padding), calc((100vw - var(--content-width)) / 2));

  @include respond-below(md) {
    padding: 0 var(--container-padding);
  }
}

/* Focus State */
:focus-visible {
  outline: rem(2) dashed var(--color-primary);
  outline-offset: rem(4);
  transition-duration: 0s !important;
}

/* Hiding class, making content visible only to screen readers but not visually */
/* "sr" meaning "screen-reader" */
.sr-only:not(:focus, :active) {
  @include sr-only;
}

// ========== Colors ==========
.text-primary {
  color: var(--color-primary);
}

.text-danger {
  color: var(--color-danger);
}

.text-warning {
  color: var(--color-warning);
}

.text-success {
  color: var(--color-success);
}

// ========== PC/Mobile Visibility ==========
.pc-only {
  @include respond-below(md) {
    display: none !important;
  }
}

.mobile-only {
  @include respond-above(md) {
    display: none !important;
  }
}

/* Text Gradient */
.text-gradient-gray {
  background: linear-gradient(90deg, rgb(255 255 255 / 70%) 0%, #fff 23.73%, #fff 47.46%, #fff 73.73%, rgb(255 255 255 / 70%) 100%);
  -webkit-background-clip: text;
  background-clip: text;
  -webkit-text-fill-color: transparent;
}

/* Text Underline with animation */
.text-underline {
  position: relative;
  text-decoration: none;

  &::after {
    content: '';
    position: absolute;
    left: 0;
    bottom: 0;
    border-radius: rem(2);
    width: 0;
    height: rem(2);
    background-color: var(--color-primary);
    transition: width var(--transition-duration-slow);
  }

  &.aos-animate {
    &::after {
      width: 100%;
    }
  }
}

.desc-text {
  color: var(--color-basic-white-60);
}
